trigger:
  branches:
    include:
      - '*'
  tags:
    include:
      - '*'
pr: none

stages:
- stage: Build
  jobs:
  - job: WindowsServer2019
    pool:
      vmImage: 'windows-2019'
    steps:
    - template: build\azure-pipelines\windows\continuous-build.yml

# - job: WindowsServer2016
#   pool:
#     vmImage: 'vs2017-win2016'
#   steps:
#   - powershell: |
#       hostname
#       whoami
#       systeminfo
#       Get-PSDrive
#       $PSVersionTable | Out-String
#       Get-Location
#   - powershell: |
#       Get-ChildItem env:* | Format-Table -AutoSize
#   - pwsh: |
#       $PSVersionTable
#       Get-Module PowershellGet -Listavailable
#       # Import the PowershellGet module of the specified version
#       $powershellGetRequiredVersion = '2.1.2'
#       $PSRepository = if ($env:PSRepository) { $env:PSRepository } else { 'PSGallery' }
#       $powershellGetInstalledVersions = (Get-Module PowerShellGet -ListAvailable).Version | % { $_.ToString() }
#       if ($powershellGetRequiredVersion -notin $powershellGetInstalledVersions) {
#           Install-Module -Name PowershellGet -Repository $PSRepository -RequiredVersion $powershellGetRequiredVersion -Scope CurrentUser -Force -Verbose
#       }
#       Import-Module -Name PowerShellGet -RequiredVersion $powershellGetRequiredVersion -Force -Verbose
#       Get-Module -Name PowerShellGet -ListAvailable

# - job: WindowsServer1803
#   pool:
#     vmImage: 'win1803'
#   steps:
#   - powershell: |
#       hostname
#       whoami
#       systeminfo
#       Get-PSDrive
#       $PSVersionTable | Out-String
#       Get-Location
#   - powershell: |
#       Get-ChildItem env:* | Format-Table -AutoSize
#   - pwsh: |
#       $PSVersionTable
#       Get-Module PowershellGet -Listavailable
#       # Import the PowershellGet module of the specified version
#       $powershellGetRequiredVersion = '2.1.2'
#       $PSRepository = if ($env:PSRepository) { $env:PSRepository } else { 'PSGallery' }
#       $powershellGetInstalledVersions = (Get-Module PowerShellGet -ListAvailable).Version | % { $_.ToString() }
#       if ($powershellGetRequiredVersion -notin $powershellGetInstalledVersions) {
#           Install-Module -Name PowershellGet -Repository $PSRepository -RequiredVersion $powershellGetRequiredVersion -Scope CurrentUser -Force -Verbose
#       }
#       Import-Module -Name PowerShellGet -RequiredVersion $powershellGetRequiredVersion -Force -Verbose
#       Get-Module -Name PowerShellGet -ListAvailable

# - job: WindowsServer2012R2
#   pool:
#     vmImage: 'vs2015-win2012r2'
#   steps:
#   - powershell: |
#       whoami
#       systeminfo
#       Get-PSDrive
#       $PSVersionTable | Out-String
#       Get-Location
#   - powershell: |
#       Get-ChildItem env:* | Format-Table -AutoSize
#   - powershell: |
#       $PSVersionTable
#       Get-Module PowershellGet -Listavailable
#       # Import the PowershellGet module of the specified version
#       $powershellGetRequiredVersion = '2.1.2'
#       $PSRepository = if ($env:PSRepository) { $env:PSRepository } else { 'PSGallery' }
#       $powershellGetInstalledVersions = (Get-Module PowerShellGet -ListAvailable).Version | % { $_.ToString() }
#       if ($powershellGetRequiredVersion -notin $powershellGetInstalledVersions) {
#           Install-Module -Name PowershellGet -Repository $PSRepository -RequiredVersion $powershellGetRequiredVersion -Scope CurrentUser -Force -Verbose
#       }
#       Import-Module -Name PowerShellGet -RequiredVersion $powershellGetRequiredVersion -Force -Verbose
#       Get-Module -Name PowerShellGet -ListAvailable

# - job: Ubuntu1604
#   pool:
#     vmImage: 'ubuntu-16.04'
#   container: mcr.microsoft.com/powershell:6.1.0-ubuntu-18.04
#   steps:
#   - bash: |
#       hostname
#       whoami
#       cat /etc/*release
#       lscpu
#       free
#       df -h
#       pwd
#   - bash: |
#       printenv
#   - pwsh: |
#       .\build\scripts\build.ps1
#   - pwsh: |
#       Get-PSDrive
#       $PSVersionTable
#       Get-Module PowershellGet -Listavailable
#       # Import the PowershellGet module of the specified version
#       $powershellGetRequiredVersion = '2.1.2'
#       $PSRepository = if ($env:PSRepository) { $env:PSRepository } else { 'PSGallery' }
#       $powershellGetInstalledVersions = (Get-Module PowerShellGet -ListAvailable).Version | % { $_.ToString() }
#       if ($powershellGetRequiredVersion -notin $powershellGetInstalledVersions) {
#           Install-Module -Name PowershellGet -Repository $PSRepository -RequiredVersion $powershellGetRequiredVersion -Scope CurrentUser -Force -Verbose
#       }
#       Import-Module -Name PowerShellGet -RequiredVersion $powershellGetRequiredVersion -Force -Verbose
#       Get-Module -Name PowerShellGet -ListAvailable

# - job: macOS1013
#   pool:
#     vmImage: 'macOS-10.13'
#   steps:
#   - pwsh: |
#       Get-PSDrive
#       $PSVersionTable
#       Get-Module PowershellGet -Listavailable
