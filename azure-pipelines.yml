# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- debug

stages:
- stage: Build_Test
  displayName: Build, Test
  jobs:
  - job: windows2019
    pool:
      vmImage: windows-2019
    workspace:
      clean: all
    steps:
    - checkout: self
      # submodules: true
    - pwsh: Get-ChildItem -Recurse
      displayName: Display repository contents
    - pwsh: |
        hostname
        whoami
        systeminfo
        Get-PSDrive
        $PSVersionTable | Out-String
        Get-Location
      displayName: Display system info
    - pwsh: |
        $elevated = ([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
        "Elevated: $elevated"
      displayName: Check for elevation
    - pwsh: |
        $VerbosePreference = 'Continue'
        $PSVersionTable | ConvertTo-Json | ConvertFrom-Json
        "PSModulePath:"
        $env:PSModulePath -split ';'
        Get-PSRepository | Select *
        Get-Module PowerShellGet -ListAvailable | Select *
      displayName: Check build dependencies
    - pwsh: |
        $VerbosePreference = 'Continue'
        New-Item "C:\program files\hi" -ItemType File
        Set-PSRepository -Name 'PSGallery' -InstallationPolicy Trusted
        Install-Module -Name MyPublishingDebugger -Repository PSGallery -Scope AllUsers -Confirm:$false
      displayName: Run powershell tests

  - job: vs2017win2016
    pool:
      vmImage: vs2017-win2016
    workspace:
      clean: all
    steps:
    - checkout: self
      # submodules: true
    - pwsh: Get-ChildItem -Recurse
      displayName: Display repository contents
    - pwsh: |
        hostname
        whoami
        systeminfo
        Get-PSDrive
        $PSVersionTable | Out-String
        Get-Location
      displayName: Display system info
    - pwsh: |
        $elevated = ([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
        "Elevated: $elevated"
      displayName: Check for elevation
    - pwsh: |
        $VerbosePreference = 'Continue'
        $PSVersionTable | ConvertTo-Json | ConvertFrom-Json
        "PSModulePath:"
        $env:PSModulePath -split ';'
        Get-PSRepository | Select *
        Get-Module PowerShellGet -ListAvailable | Select *
      displayName: Check build dependencies
    - pwsh: |
        $VerbosePreference = 'Continue'
        New-Item "C:\program files\hi" -ItemType File
        Set-PSRepository -Name 'PSGallery' -InstallationPolicy Trusted
        Install-Module -Name MyPublishingDebugger -Repository PSGallery -Scope AllUsers -Confirm:$false
      displayName: Run powershell tests

  - job: win1803
    pool:
      vmImage: win1803
    workspace:
      clean: all
    steps:
    - checkout: self
      # submodules: true
    - pwsh: Get-ChildItem -Recurse
      displayName: Display repository contents
    - pwsh: |
        hostname
        whoami
        systeminfo
        Get-PSDrive
        $PSVersionTable | Out-String
        Get-Location
      displayName: Display system info
    - pwsh: |
        $elevated = ([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
        "Elevated: $elevated"
      displayName: Check for elevation
    - pwsh: |
        $VerbosePreference = 'Continue'
        $PSVersionTable | ConvertTo-Json | ConvertFrom-Json
        "PSModulePath:"
        $env:PSModulePath -split ';'
        Get-PSRepository | Select *
        Get-Module PowerShellGet -ListAvailable | Select *
      displayName: Check build dependencies
    - pwsh: |
        $VerbosePreference = 'Continue'
        New-Item "C:\program files\hi" -ItemType File
        Set-PSRepository -Name 'PSGallery' -InstallationPolicy Trusted
        Install-Module -Name MyPublishingDebugger -Repository PSGallery -Scope AllUsers -Confirm:$false
      displayName: Run powershell tests

  - job: ubuntu1604
    pool:
      vmImage: ubuntu-16.04
    workspace:
      clean: all
    # container: joeltimothyoh/powershell:6.1.0-ubuntu-18.04-git
    steps:
    - checkout: self
      # submodules: true
    - pwsh: Get-ChildItem -Recurse
      displayName: Display repository contents
    - bash: |
        hostname
        whoami
        cat /etc/*release
        lscpu
        free
        df -h
        pwd
      displayName: Display system info
    - bash: |
        set -eux
        cat /etc/passwd
        cat /etc/group
        sudo touch /usr/local/
        sudo apt-get update
        sudo apt-get install htop
        docker run -t --rm alpine:3.8 whoami
        docker run -t --rm joeltimothyoh/powershell:6.1.0-ubuntu-18.04-git whoami
        docker run -t --rm joeltimothyoh/powershell:6.1.0-ubuntu-18.04-git bash -c 'apt-get update && apt-get install lib32stdc++6'
      displayName: Check for elevation
    - pwsh: |
        $VerbosePreference = 'Continue'
        $PSVersionTable | ConvertTo-Json | ConvertFrom-Json
        "PSModulePath:"
        $env:PSModulePath -split ';'
        Get-PSRepository | Select *
        Get-Module PowerShellGet -ListAvailable | Select *
      displayName: Check build dependencies
    - pwsh: |
        $VerbosePreference = 'Continue'
        # New-Item /usr/local/bin/hi -ItemType File -Force
        Install-Module -Name MyPublishingDebugger -Repository PSGallery -Scope AllUsers -Confirm:$false
      displayName: Run powershell tests

  - job: macOS1014
    pool:
      vmImage: macOS-10.14
    workspace:
      clean: all
    steps:
    - checkout: self
      # submodules: true
    - pwsh: Get-ChildItem -Recurse
      displayName: Display repository contents
    - bash: |
        hostname
        whoami
        system_profiler -detailLevel mini
        top -l 1 -s 0 | grep PhysMem
        df -h
        pwd
      displayName: Display system info
    - bash: |
        set -eux
        sudo touch /usr/local/hi
      displayName: Check for elevation
    - pwsh: |
        $VerbosePreference = 'Continue'
        $PSVersionTable | ConvertTo-Json | ConvertFrom-Json
        "PSModulePath:"
        $env:PSModulePath -split ';'
        Get-PSRepository | Select *
        Get-Module PowerShellGet -ListAvailable | Select *
      displayName: Check build dependencies
    - pwsh: |
        $VerbosePreference = 'Continue'
        # New-Item /usr/local/hi -ItemType File
        Set-PSRepository -Name 'PSGallery' -InstallationPolicy Trusted
        Install-Module -Name MyPublishingDebugger -Repository PSGallery -Scope AllUsers -Confirm:$false
      displayName: Run powershell tests

  - job: macOS1013
    pool:
      vmImage: macOS-10.13
    workspace:
      clean: all
    steps:
    - checkout: self
      # submodules: true
    - pwsh: Get-ChildItem -Recurse
      displayName: Display repository contents
    - bash: |
        hostname
        whoami
        system_profiler -detailLevel mini
        top -l 1 -s 0 | grep PhysMem
        df -h
        pwd
      displayName: Display system info
    - bash: |
        set -eux
        sudo touch /usr/local/hi
      displayName: Check for elevation
    - pwsh: |
        $VerbosePreference = 'Continue'
        $PSVersionTable | ConvertTo-Json | ConvertFrom-Json
        "PSModulePath:"
        $env:PSModulePath -split ';'
        Get-PSRepository | Select *
        Get-Module PowerShellGet -ListAvailable | Select *
      displayName: Check build dependencies
    - pwsh: |
        $VerbosePreference = 'Continue'
        # New-Item /usr/local/hi -ItemType File
        Set-PSRepository -Name 'PSGallery' -InstallationPolicy Trusted
        Install-Module -Name MyPublishingDebugger -Repository PSGallery -Scope AllUsers -Confirm:$false
      displayName: Run powershell tests
