# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  - vm

variables:
  - name: GLOBAL_VAR1
    value: global1
  - name: GLOBAL_VAR2
    value: global2

jobs:
- job: 'Ubuntu_1604'
  displayName: 'Ubuntu 16.04'
  continueOnError: false
  pool:
    vmImage: 'ubuntu-16.04'
  workspace:
    clean: all
  timeoutInMinutes: 5
  strategy:
    # maxParallel:: 2
    # parallel: 4
    matrix:
      Matrix1:
        MATRIX_VAR: 'matrix1'
      Matrix2:
        MATRIX_VAR: 'matrix2'
      # Matrix3:
      #   MATRIX_VAR: 'matrix3'
      # Matrix4:
      #   MATRIX_VAR: 'matrix4'
  steps:
  - script: |
      whoami
      cat /etc/*release
      lscpu
      df -h
      free
      docker info
      docker version
    displayName: 'System Info'
  - script: |
      printenv
    displayName: 'Environment variables'
  - script: |
      # set -e
      echo $GLOBAL_VAR1
      echo $GLOBAL_VAR2
      echo $MATRIX_VAR
      VAR1=value1
      echo $VAR1
      EXPORTED_VAR1=exported1
      export EXPORTED_VAR1
      docker run -t ubuntu:16.04 bash -c 'whoami; cat /etc/*release; lscpu; df -h; free; printenv'
      docker volume create volume1
      docker images
      docker ps -a
      docker volume ls
      # docker unknown command
  - script: |
      echo $VAR1
      echo $EXPORTED_VAR1
      docker images
      docker ps -a
      docker volume ls
    displayName: matrix $(MATRIX_VAR)
  - script: |
      docker logout
    condition: always()
- job: 'Ubuntu_1604_B'
  dependsOn: 'Ubuntu_1604'
  continueOnError: false
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - script: |
      echo hello from job b!