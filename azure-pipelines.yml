# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- debug

jobs:
- job: WindowsServer2019
  pool:
    vmImage: 'windows-2019'
  steps:
  - powershell: |
      # systeminfo
      Get-PSDrive
      $($PSVersionTable | Out-String).Trim()
      Start-Sleep -Seconds 300

- job: WindowsServer2016
  pool:
    vmImage: 'vs2017-win2016'
  steps:
  - powershell: |
      # systeminfo
      Get-PSDrive
      $($PSVersionTable | Out-String).Trim()
      Start-Sleep -Seconds 300

- job: WindowsServer2012R2
  pool:
    vmImage: 'vs2015-win2012r2'
  steps:
  - powershell: |
      # systeminfo
      Get-PSDrive
      $($PSVersionTable | Out-String).Trim()
      Start-Sleep -Seconds 300

- job: WindowsServer1803
  pool:
    vmImage: 'win1803'
  steps:
  - powershell: |
      # systeminfo
      Get-PSDrive
      $($PSVersionTable | Out-String).Trim()
      Start-Sleep -Seconds 300

- job: Ubuntu1604
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - powershell: |
      Get-PSDrive
      $($PSVersionTable | Out-String).Trim()
      Start-Sleep -Seconds 300
  # - script: |
  #     whoami
  #     cat /etc/*release
  #     lscpu
  #     df -h
  #     free
  # - script: |
  #     TEST_SCRIPT=$( cat - <<'EOF'
  #       set -e
  #       printenv
  #       echo; ls -al
  #       echo; exec steamcmd.sh +login anonymous +quit
  #     EOF
  #     )
  #     echo 'end of script definition
  #     echo "${TEST_SCRIPT}"

- job: macOS1013
  pool:
    vmImage: 'macOS-10.13'
  steps:
  - script: |
      whoami
      system_profiler
      lscpu
      df -h
      top -l 1 -s 0 | grep PhysMem
  - powershell: |
      Get-PSDrive
      $($PSVersionTable | Out-String).Trim()
      Start-Sleep -Seconds 300
